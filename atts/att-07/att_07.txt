/*var sceneSize = 200
let utils = new Utils({ width: sceneSize * 4, height: sceneSize * 3, a: .2 });

let rotationXCtrl = new Controls("rotation-x", "Baixo", "Cima")
let rotationYCtrl = new Controls("rotation-y", "Direita", "Esquerda")
let rotationZCtrl = new Controls("rotation-z", "Horário", "Anti-Horário")
let scaleCtrl = new Controls("scale", "Aumentando", "Diminuindo", { increment: .01 })
let translationCtrl = new Controls("translation", "Pra Frente", "Pra Trás", { increment: .01 })
let speedSlider = window.document.querySelector("#spd-slider")
let speedValueEl = window.document.querySelector("#speed-value")

speedSlider.addEventListener("input", () => {
    speed = -speedSlider.value
    speedValueEl.innerText = -speedSlider.value
})

let vertices = [];
let colors = [];

let cubeVertices = [
    [-.5, -.5, .5],
    [-.5, .5, .5],
    [-.5, .5, -.5],
    [-.5, -.5, -.5],
    [.5, -.5, .5],
    [.5, .5, .5],
    [.5, .5, -.5],
    [.5, -.5, -.5]
];

let textureCoordinates = [
    // 0
    0.0, 0.0, 1.0, 0.0, 1.0, 1.0,
    0.0, 0.0, 1.0, 1.0, 0.0, 1.0,
]

let drawColors = {
    azul: [0.015625, 0.3125, 0.56640625],
    ciano: [0.26171875, 0.7421875, 0.84375],
    amarelo: [1, 0.87109375, 0],
    verde: [0, 0.609, 0.230],
    vermelho: [1, 0, 0],
    branco: [1, 1, 1],
    preto: [0, 0, 0]
};

utils.initShader({
    vertexShader: `#version 300 es
                        precision mediump float;

                        in vec3 aPosition;
                        
                        in vec3 aColor;
                        out vec4 vColor;

                        uniform float resize;
                        uniform vec3 theta;
                        uniform float translate;

                        uniform mat4 uViewMatrix;
                        uniform mat4 uProjectionMatrix;

                        in vec2 texCoords;
                        out vec2 textureCoords;

                        void main(){

                            vec3 angles = radians(theta);
                            vec3 c = cos(angles);
                            vec3 s = sin(angles);

                            mat4 rx = mat4( 1.0, 0.0, 0.0, 0.0,
                                            0.0, c.x, -s.x, 0.0,
                                            0.0, s.x, c.x,  0.0,
                                            0.0, 0.0, 0.0, 1.0);

                            mat4 ry = mat4( c.y, 0.0, s.y, 0.0,
                                            0.0, 1.0, 0.0, 0.0,
                                            -s.y, 0.0, c.y, 0.0,
                                            0.0, 0.0, 0.0, 1.0);

                            mat4 rz = mat4( c.z, -s.z, 0.0, 0.0,
                                            s.z, c.z, 0.0, 0.0,
                                            0.0, 0.0, 1.0, 0.0,
                                            0.0, 0.0, 0.0, 1.0);

                            gl_PointSize = 10.0;
                            gl_Position = rx * ry * rz * vec4(aPosition, 1.0);
                            gl_Position.x = (gl_Position.x * resize) + translate;
                            gl_Position.y = (gl_Position.y * resize) + translate;
                            vColor = vec4(aColor, 1.0);
                            textureCoords = texCoords;
                        }`,

    fragmentShader: `#version 300 es
                        precision highp float;
                        
                        in vec2 textureCoords;

                        uniform sampler2D uSampler;
                        
                        out vec4 fColor;

                        void main(){
                            fColor = texture(uSampler, textureCoords);
                        }`
});

let theta = [0, 0, 0]
let size = 1;
let translate_x_y = 0;

let speed = 25;

// Inicializa e ativa cada textura individualmente
let texture1 = initAndActivateTexture("texturas/Kendrick.jpg", 0); // Textura 0
let texture2 = initAndActivateTexture("texturas/LikeThat.jpg", 1); // Textura 1
let texture3 = initAndActivateTexture("texturas/Euphoria.jpg", 2); // Textura 2
let texture4 = initAndActivateTexture("texturas/6_16inLA.jpg", 3); // Textura 3
let texture5 = initAndActivateTexture("texturas/MeetTheGrahams.jpg", 4); // Textura 4
let texture6 = initAndActivateTexture("texturas/NotLikeUs.jpg", 5); // Textura 5

utils.initBuffer({ vertices: textureCoordinates });
utils.linkBuffer({ variable: "texCoords", reading: 2 });

render()

function render() {

    theta[0] += rotationXCtrl.currValue;
    theta[1] += rotationYCtrl.currValue;
    theta[2] += rotationZCtrl.currValue
    size += scaleCtrl.currValue;
    translate_x_y += translationCtrl.currValue;

    //  Face da Frente: Damn
    drawFace([2, 6, 7, 3], { theta: theta, resize: size, translation: translate_x_y, clear: false, cor: "azul", uSamplerID: 0 });

    // Face da Esquerda: Like That 
    drawFace([0, 1, 2, 3], { theta: theta, resize: size, translation: translate_x_y, clear: false, cor: "branco", uSamplerID: 1 });

    // Face da Direita: Euphoria
    drawFace([6, 5, 4, 7], { theta: theta, resize: size, translation: translate_x_y, clear: false, cor: "amarelo", uSamplerID: 2 });

    // Face de Tras: 6:16 in LA
    drawFace([4, 5, 1, 0], { theta: theta, resize: size, translation: translate_x_y, clear: false, cor: "vermelho", uSamplerID: 3 });

    // Face de Cima: Meet The grahamns
    drawFace([5, 6, 2, 1], { theta: theta, resize: size, translation: translate_x_y, clear: false, cor: "verde", uSamplerID: 4 });

    // face de Baixo: Not Like Us
    drawFace([ 3, 7, 4, 0], { theta: theta, resize: size, translation: translate_x_y, clear: false, cor: "preto", uSamplerID: 5 });

    window.setTimeout(() => render(), speed)
}

function drawFace(vertices_info, { theta = [0, 0, 0], resize = 1, translation = 0, method = "TRIANGLES", clear = false, reading = 3, uSamplerID = 0, cor = "preto" }) {

    makeFace(...vertices_info, cor);

    utils.initBuffer({ vertices });
    utils.linkBuffer({ variable: "aPosition", reading: reading });

    utils.initBuffer({ vertices: colors });
    utils.linkBuffer({ variable: "aColor", reading: 3 });

    utils.linkUniformVariable({ shaderName: "resize", value: resize, kind: "1f" })
    utils.linkUniformVariable({ shaderName: "theta", value: theta, kind: "3fv" })
    utils.linkUniformVariable({ shaderName: "translate", value: translation, kind: "1f" })

    utils.linkUniformVariable({ shaderName: "uSampler", value: uSamplerID, kind: "1i" })

    utils.drawElements({ method: method, clear })
}


// Funcão que inicializa e ativa uma textura individualmente
function initAndActivateTexture(src, textureUnit) {
    let gl = utils.gl;
    let texture = gl.createTexture();
    let img = new Image();
    img.onload = function () {
        gl.activeTexture(gl[`TEXTURE${textureUnit}`]);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    }
    img.src = src;
    return texture;
}

function makeFace(v1, v2, v3, v4, cor) {
    clearVerticesAndColors()

    let triangulos = [];

    triangulos.push(v1, v2, v3);
    triangulos.push(v1, v3, v4);

    triangulos.forEach(vertice => {
        vertices.push(...cubeVertices[vertice]);
        colors.push(...drawColors[cor]);
    })
    console.log(vertices)
}

function clearVerticesAndColors() {
    vertices = []
    colors = []
}*/
class Utils {

	constructor({ width = 400,
		height = 400,
		r = 0.1,
		g = 0.2,
		b = 0.3,
		a = 0.4,
		preserveDrawingBuffer = false
	} = {}) {

		var canvas = document.getElementById('canvas');

		canvas.width = width;
		canvas.height = height;

		/*
		  Quando preserveDrawingBuffer for marcado como "true", o
		  webGL não irá limpar o Buffer de desenho automaticamente em
		  uma chamada de drawElements. Nesse caso, o método gl.clear
		  terá que ser invocado manualmente para que o buffer seja
		  limpo.
	
		  Marque como true apenas se você estiver usando múltiplos
		  viewports.
		*/
		this.gl = canvas.getContext('webgl2', { preserveDrawingBuffer: preserveDrawingBuffer });

		console.log(this.gl);

		this.gl.clearColor(r, g, b, a);

		/*
		  Precisa colocar a linha abaixo para utilizar o algoritmo de remoção de
		  superfícies oclusas. No caso, o algoritmo invocado é o z-buffer.
	
		  Se você não colocar a linha abaixo, o WebGL vai desenhar os triângulos na
		  tela na ordem em que foi especificado no programa. 
		*/
		this.gl.enable(this.gl.DEPTH_TEST);

		this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);
	}

	initBuffer({ vertices = [-1, -1, 0, 1, 1, -1] } = {}) {


		var bufferId = this.gl.createBuffer();
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferId);

		this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices),
			this.gl.STATIC_DRAW);

		this.vertices = vertices;

	}


	initShader(
		{ vertexShader = `#version 300 es
precision mediump float;

in vec2 aPosition;

void main(){
gl_PointSize = 10.0;
gl_Position = vec4(aPosition, 0.0, 1.0);
}`,
			fragmentShader = `#version 300 es
precision highp float;
out vec4 fColor;
void main(){
   fColor=vec4(1.0, 0.0, 0.0, 1.0);
}`} = {}) {
		var vertShdr = this.gl.createShader(this.gl.VERTEX_SHADER);
		var fragShdr = this.gl.createShader(this.gl.FRAGMENT_SHADER);
		this.gl.shaderSource(vertShdr, vertexShader);
		this.gl.shaderSource(fragShdr, fragmentShader);
		this.gl.compileShader(vertShdr);
		this.gl.compileShader(fragShdr);

		if (!this.gl.getShaderParameter(vertShdr, this.gl.COMPILE_STATUS)) {
			var msg = "Vertex shader failed to compile.  The error log is:"
				+ "<pre>" + this.gl.getShaderInfoLog(vertShdr) + "</pre>";
			alert(msg);
		}

		if (!this.gl.getShaderParameter(fragShdr, this.gl.COMPILE_STATUS)) {
			var msg = "Fragment shader failed to compile.  The error log is:"
				+ "<pre>" + this.gl.getShaderInfoLog(fragShdr) + "</pre>";
			alert(msg);
		}

		var program = this.gl.createProgram();
		this.gl.attachShader(program, vertShdr);
		this.gl.attachShader(program, fragShdr);
		this.gl.linkProgram(program);

		if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {
			var msg = "Shader program failed to link.  The error log is:"
				+ "<pre>" + this.gl.getProgramInfoLog(program) + "</pre>";
			alert(msg);
		}
		console.log(program);
		this.gl.useProgram(program);

		this.program = program;
	}

	linkBuffer({ variable = "aPosition", reading = 2 } = {}) {
		var positionLoc = this.gl.getAttribLocation(this.program, variable);
		this.gl.vertexAttribPointer(positionLoc, reading, this.gl.FLOAT, false, 0, 0);
		this.gl.enableVertexAttribArray(positionLoc);
		this.reading = reading;
	}

	drawElements({ start = 0, end = this.vertices.length / this.reading, method = "POINTS", clear = true } = {}) {
		if (clear) {
			this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);
		}
		this.gl.drawArrays(this.gl[method], start, end);
	}